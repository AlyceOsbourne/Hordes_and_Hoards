from enum import Enum
from pygame_core import get_game

VERBOSE = False

game = get_game()
eh, am, sm = game.handles


class Tiles(Enum):  # I should remove these hard codings
    VOID = 0, "░", "\n".join(
        [
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░"
        ]
    )

    WALL_HORIZONTAL = 1, "═", "\n".join(
        [
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "████████████████",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "████████████████",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░"

        ]
    )
    WALL_VERTICAL = 2, "║", "\n".join(
        [
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░"
        ]
    )

    WALL_T_UP = 3, "╩", "\n".join(
        [
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░██▓▓▓▓▓▓▓▓▓▓██░",
            "██▓▓▓▓▓▓▓▓▓▓▓▓██",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "████████████████",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░"

        ]
    )
    WALL_T_DOWN = 4, "╦", "\n".join(
        [
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "████████████████",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "██▓▓▓▓▓▓▓▓▓▓▓▓██",
            "░██▓▓▓▓▓▓▓▓▓▓██░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░"
        ]
    )
    WALL_T_LEFT = 5, "╠", "\n".join(
        [
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓██░",
            "░░█▓▓▓▓▓▓▓▓▓▓▓██",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓██",
            "░░█▓▓▓▓▓▓▓▓▓▓██░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░"
        ]
    )
    WALL_T_RIGHT = 6, "╣", "\n".join(
        [
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░██▓▓▓▓▓▓▓▓▓▓█░░",
            "██▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "██▓▓▓▓▓▓▓▓▓▓▓█░░",
            "░██▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░"
        ]
    )

    WALL_X = 7, "╬", "\n".join(
        [
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░██▓▓▓▓▓▓▓▓▓▓██░",
            "██▓▓▓▓▓▓▓▓▓▓▓▓██",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "██▓▓▓▓▓▓▓▓▓▓▓▓██",
            "░██▓▓▓▓▓▓▓▓▓▓██░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░"
        ]
    )

    WALL_TR_CORNER = 8, "╗", "\n".join(
        [
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "█████████████░░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓██░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "██▓▓▓▓▓▓▓▓▓▓▓█░░",
            "░██▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░"
        ]
    )
    WALL_TL_CORNER = 9, "╔", "\n".join(
        [
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░█████████████",
            "░░██▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓██",
            "░░█▓▓▓▓▓▓▓▓▓▓██░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░"
        ]
    )
    WALL_BR_CORNER = 10, "╝", "\n".join(
        [
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░██▓▓▓▓▓▓▓▓▓▓█░░",
            "██▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓██░░",
            "█████████████░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░"
        ]
    )
    WALL_BL_CORNER = 11, "╚", "\n".join(
        [
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓██░",
            "░░█▓▓▓▓▓▓▓▓▓▓▓██",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░██▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░░█████████████",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░"
        ]
    )

    FLOOR = 12, "▓", "\n".join(
        [
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓"
        ]
    )

    ENTRANCE = 13, "∩", "\n".join(
        [
            "▓▓▓▓▄▄▄▄▄▄▄▄▓▓▓▓",
            "▓▓▓▓▌░░░░░░▐▓▓▓▓",
            "▓▓▓▓▌░░░░░░▐▓▓▓▓",
            "▓▓▓▓▌░░░░░░▐▓▓▓▓",
            "▓▓▓▓▌░░░░░░▐▓▓▓▓",
            "▓▓▓▓▌░░░░░░▐▓▓▓▓",
            "▓▓▓▓▌░░░░░░▐▓▓▓▓",
            "▓▓▓▓▌░░∩∩░░▐▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
        ]
    )

    BOSS = 14, "◙", "\n".join(
        [
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓◙◙▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓◙◙▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓"
        ]
    )

    HOARD = 15, "⌂", "\n".join(
        [
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓⌂⌂▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓⌂⌂▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓"
        ]

    )

    def __new__(cls, value, char, tile):
        obj = object.__new__(cls)
        obj._value_ = value
        obj.char = char
        obj.tile = tile
        return obj

    @classmethod
    def from_char(cls, char):
        for t in cls:
            if t.char == char:
                return t
        raise ValueError(f"No tile found for char {char}")

    @classmethod
    def from_name(cls, name):
        for t in cls:
            if t.name == name:
                return t

    def __hash__(self):
        return self.value

    def __str__(self):
        return self.char

    @staticmethod
    def convert_to_tiles(grid):
        _grid = []
        for column in grid:
            col = []
            for row in column:
                col.append([list(_row) for _row in row.tile.split("\n")])
            for row in zip(*col):
                _t = []
                for t in row:
                    _t.extend(t)
                _grid.append(_t)
        return _grid

    @staticmethod
    def excluded_from_generation():
        return [
            Tiles.ENTRANCE,
            Tiles.BOSS,
            Tiles.HOARD,
        ]

    @classmethod
    def walkable(cls):
        # everything but VOID
        return [t for t in cls if t != Tiles.VOID]

    def is_walkable(self):
        return self in self.walkable

    @staticmethod
    def pretty_print_tiles(tile_grid):
        for row in tile_grid:
            print("".join(row))

    @staticmethod
    def tiles_to_string(tiles):
        return "\n".join(["".join(row) for row in tiles])

    @staticmethod
    def parse(string):
        tile_set = []
        if VERBOSE:
            print(f"Parsing \n{string}")
        for line in string.split("\n"):
            if VERBOSE:
                print(f"Parsing line {line}")
            tile_set.append([])
            for char in line:
                if char == " ":
                    continue
                if VERBOSE:
                    print(f"Parsing char {char}")
                tile = Tiles.from_char(char)
                if VERBOSE:
                    print(f"Got tile {tile}")
                if tile is None:
                    raise Exception(f"Invalid tile: {char}")
                tile_set[-1].append(tile)
        return tile_set

    @classmethod
    def tiles(cls):
        return [(t.name, t.tile) for t in cls]

    def get_tile_image(self):
        return am.get_image(self.name + ".png")


class Direction(Enum):
    North = (-1, 0), "↑"

    South = (1, 0), "↓"

    East = (0, 1), "→"

    West = (0, -1), "←"

    North_East = (-1, 1), "↗"

    North_West = (-2, -2), "↖"

    South_East = (1, 1), "↘"

    South_West = (1, -1), "↙"

    def __new__(cls, value: tuple[int, int], char):
        obj = object.__new__(cls)
        obj._value_ = value
        obj.char = char
        return obj

    @property
    def opposite(self):
        return Direction.get_from_value((-self.value[0], -self.value[1]))

    @classmethod
    def get_from_value(cls, param):
        for direction in cls:
            if direction.value == param:
                return direction
        return None

    @property
    def x(self):
        return self.value[0]

    @property
    def y(self):
        return self.value[1]


if __name__ == "__main__":
    # get the tile for each Tile in Tiles and write to a pygame surface, tile across tile_surface and then save to file
    import pygame

    pygame.init()
    font = pygame.font.SysFont("monospace", 1)
    # font color
    font_color = (200, 255, 220)
    tile_surface = pygame.Surface((16, 16))
    for tile in Tiles:
        for index, row in enumerate(tile.tile.split("\n")):
            for index2, char in enumerate(row):
                tile_surface.blit(font.render(char, True, font_color), (index2, index))
        pygame.image.save(tile_surface, f"{tile.name}.png")
        tile_surface.fill((0, 0, 0))
    pygame.quit()
