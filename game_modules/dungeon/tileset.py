from enum import Enum


class Tiles(Enum):
    VOID = "░", "\n".join(
        [
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░"
        ]
    )

    WALL_HORIZONTAL = "═", "\n".join(
        [
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "████████████████",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "████████████████",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░"

        ]
    )
    WALL_VERTICAL = "║", "\n".join(
        [
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░"
        ]
    )

    WALL_T_UP = "╩", "\n".join(
        [
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "███▓▓▓▓▓▓▓▓▓▓███",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "████████████████",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░"

        ]
    )
    WALL_T_DOWN = "╦", "\n".join(
        [
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "████████████████",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "███▓▓▓▓▓▓▓▓▓▓███",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░"
        ]
    )
    WALL_T_LEFT = "╠", "\n".join(
        [
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓███",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓███",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░"
        ]
    )
    WALL_T_RIGHT = "╣", "\n".join(
        [
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "███▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "███▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░"
        ]
    )

    WALL_X = "╬", "\n".join(
        [
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "███▓▓▓▓▓▓▓▓▓▓███",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "███▓▓▓▓▓▓▓▓▓▓███",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░"
        ]
    )

    WALL_TR_CORNER = "╗", "\n".join(
        [
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "██████████████░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "███▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░"
        ]
    )
    WALL_TL_CORNER = "╔", "\n".join(
        [
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░",
            "░░██████████████",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓███",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░"
        ]
    )
    WALL_BR_CORNER = "╝", "\n".join(
        [
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "███▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓█░░",
            "██████████████░░",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░"
        ]
    )
    WALL_BL_CORNER = "╚", "\n".join(
        [
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓█░░",
            "░░█▓▓▓▓▓▓▓▓▓▓███",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░█▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "░░██████████████",
            "░░░░░░░░░░░░░░░░",
            "░░░░░░░░░░░░░░░░"
        ]
    )

    FLOOR = "▓", "\n".join(
        [
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓"
        ]
    )

    ENTRANCE = "∩", "\n".join(
        [
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▄▄▄▄▄▄▄▄▓▓▓▓",
            "▓▓▓▓▌░░░░░░▐▓▓▓▓",
            "▓▓▓▓▌░░░░░░▐▓▓▓▓",
            "▓▓▓▓▌░░░░░░▐▓▓▓▓",
            "▓▓▓▓▌░░░░░░▐▓▓▓▓",
            "▓▓▓▓▌░░░░░░▐▓▓▓▓",
            "▓▓▓▓▌░░░░░░▐▓▓▓▓",
            "▓▓▓▓▌░░░░░░▐▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓"
        ]
    )

    BOSS = "◙", "\n".join(
        [
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓◙◙◙◙◙◙◙◙▓▓▓▓",
            "▓▓▓▓◙◙◙◙◙◙◙◙▓▓▓▓",
            "▓▓▓▓◙◙◙◙◙◙◙◙▓▓▓▓",
            "▓▓▓▓◙◙◙◙◙◙◙◙▓▓▓▓",
            "▓▓▓▓◙◙◙◙◙◙◙◙▓▓▓▓",
            "▓▓▓▓◙◙◙◙◙◙◙◙▓▓▓▓",
            "▓▓▓▓◙◙◙◙◙◙◙◙▓▓▓▓",
            "▓▓▓▓◙◙◙◙◙◙◙◙▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓"
        ]
    )

    HOARD = "⌂", "\n".join(
        [
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓⌂⌂⌂⌂⌂⌂⌂⌂▓▓▓▓",
            "▓▓▓▓⌂⌂⌂⌂⌂⌂⌂⌂▓▓▓▓",
            "▓▓▓▓⌂⌂⌂⌂⌂⌂⌂⌂▓▓▓▓",
            "▓▓▓▓⌂⌂⌂⌂⌂⌂⌂⌂▓▓▓▓",
            "▓▓▓▓⌂⌂⌂⌂⌂⌂⌂⌂▓▓▓▓",
            "▓▓▓▓⌂⌂⌂⌂⌂⌂⌂⌂▓▓▓▓",
            "▓▓▓▓⌂⌂⌂⌂⌂⌂⌂⌂▓▓▓▓",
            "▓▓▓▓⌂⌂⌂⌂⌂⌂⌂⌂▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓",
            "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓"
        ]
    )

    def __new__(cls, char, tile=None):
        obj = object.__new__(cls)
        obj.char = char
        obj.tile = tile
        return obj

    @classmethod
    def get_tile_from_char(cls, char) -> str:
        for tile in cls:
            if tile.char == char:
                return tile.tile

    @classmethod
    def convert_to_tiles(cls, char_grid: list[list[str]]):
        # function to take a grid of chars, convert them to tiles and
        # then place said tiles into a singular grid
        # for each row in char grid, for each char in row, place tile into grid
        grid = []
        for column in char_grid:
            col = []
            for row in column:
                col.append([list(row) for row in cls.get_tile_from_char(row).split("\n")])
            for row in zip(*col):
                _t = []
                for t in row:
                    _t.extend(t)
                grid.append(_t)
        return grid

    @classmethod
    def walkable(cls):
        return ["▓", "⌂", "◙"]

    def is_walkable(self):
        return self.char in self.walkable


def pretty_print_tiles(tile_grid):
    for row in tile_grid:
        print("".join(row))


def tiles_to_string(tiles):
    return "\n".join(["".join(row) for row in tiles])
